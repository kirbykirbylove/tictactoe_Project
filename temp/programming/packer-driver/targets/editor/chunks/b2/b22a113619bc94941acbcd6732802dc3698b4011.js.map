{"version":3,"sources":["file:///C:/Users/sylia/tictactoe_Project/assets/TicTacToeGame.ts"],"names":["_decorator","Component","Node","Button","Color","Label","Sprite","SpriteFrame","ccclass","property","GameState","CellState","TicTacToeGame","gameState","Playing","board","Array","fill","Empty","gridButtons","WINNING_COMBINATIONS","start","initializeGame","setupEventListeners","updateStatusText","updateResultIcon","i","button","gameBoard","children","getComponent","push","updateCellSprite","node","on","EventType","CLICK","onCellClick","resetButton","resetGame","index","makeMove","Player","checkGameEnd","scheduleOnce","makeAIMove","player","bestMove","getBestMove","AI","emptyIndices","useMinimax","Math","random","bestScore","Infinity","score","minimax","randomIndex","floor","length","depth","isMaximizing","winner","getWinner","isBoardFull","max","min","PlayerWin","circleSprite","AIWin","crossSprite","Draw","combination","a","b","c","every","cell","state","sprite","spriteFrame","emptySprite","text","color","statusLabel","string","resultIcon","active"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Button, Color, Label, Sprite, SpriteFrame, Vec3 } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nenum GameState {\r\n    Playing,\r\n    PlayerWin,\r\n    AIWin,\r\n    Draw\r\n}\r\n\r\nenum CellState {\r\n    Empty = 0,\r\n    Player = 1,  // 圈圈\r\n    AI = 2       // 叉叉\r\n}\r\n\r\n@ccclass('TicTacToeGame')\r\nexport class TicTacToeGame extends Component {\r\n    \r\n    @property(Node)\r\n    gameBoard: Node = null;\r\n    \r\n    @property(Button)\r\n    resetButton: Button = null;\r\n    \r\n    @property(Label)\r\n    statusLabel: Label = null;\r\n    \r\n    @property(SpriteFrame)\r\n    circleSprite: SpriteFrame = null;  // 圈圈圖片\r\n    \r\n    @property(SpriteFrame)\r\n    crossSprite: SpriteFrame = null;   // 叉叉圖片\r\n    \r\n    @property(SpriteFrame)\r\n    emptySprite: SpriteFrame = null;   // 空格圖片\r\n\r\n    @property(Sprite)\r\n    resultIcon: Sprite = null;  // 用來顯示圈圈或叉叉圖片\r\n\r\n    \r\n    private gameState: GameState = GameState.Playing;\r\n    private board: CellState[] = new Array(9).fill(CellState.Empty);\r\n    private gridButtons: Button[] = [];\r\n    \r\n    // 获胜组合\r\n    private readonly WINNING_COMBINATIONS = [\r\n        [0, 1, 2], [3, 4, 5], [6, 7, 8], // 横排\r\n        [0, 3, 6], [1, 4, 7], [2, 5, 8], // 豎排\r\n        [0, 4, 8], [2, 4, 6]             // 對角線\r\n    ];\r\n    \r\n    start() {\r\n        this.initializeGame();\r\n        this.setupEventListeners();\r\n    }\r\n    \r\n    private initializeGame() {\r\n        // 初始化遊戲版\r\n        this.board.fill(CellState.Empty);\r\n        this.gameState = GameState.Playing;\r\n        this.updateStatusText(\"\");\r\n        this.updateResultIcon(); // 不顯示 icon\r\n        \r\n        // 獲取所有格子按鈕\r\n        this.gridButtons = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            const button = this.gameBoard.children[i].getComponent(Button);\r\n            this.gridButtons.push(button);\r\n            this.updateCellSprite(i, CellState.Empty);\r\n        }\r\n    }\r\n    \r\n    private setupEventListeners() {\r\n        // 設置格子按鈕事件\r\n        for (let i = 0; i < 9; i++) {\r\n            const button = this.gridButtons[i];\r\n            button.node.on(Button.EventType.CLICK, () => this.onCellClick(i), this);\r\n        }\r\n        \r\n        // 設置重製按鈕事件\r\n        if (this.resetButton) {\r\n            this.resetButton.node.on(Button.EventType.CLICK, this.resetGame, this);\r\n        }\r\n    }\r\n    \r\n    private onCellClick(index: number) {\r\n        // 檢查遊戲狀態和格子是否為空\r\n        if (this.gameState !== GameState.Playing || this.board[index] !== CellState.Empty) {\r\n            return;\r\n        }\r\n        \r\n        // 玩家下棋\r\n        this.makeMove(index, CellState.Player);\r\n        \r\n        // 檢查遊戲是否結束\r\n        if (this.checkGameEnd()) {\r\n            return;\r\n        }\r\n        \r\n        // AI下棋\r\n        this.scheduleOnce(() => {\r\n            this.makeAIMove();\r\n            this.checkGameEnd();\r\n        }, 0.5); // 延遲0.5秒讓AI下棋\r\n    }\r\n    \r\n    private makeMove(index: number, player: CellState) {\r\n        this.board[index] = player;\r\n        this.updateCellSprite(index, player);\r\n    }\r\n    \r\n    private makeAIMove() {\r\n        if (this.gameState !== GameState.Playing) {\r\n            return;\r\n        }\r\n        \r\n        const bestMove = this.getBestMove();\r\n        if (bestMove !== -1) {\r\n            this.makeMove(bestMove, CellState.AI);\r\n        }\r\n    }\r\n    \r\n    private getBestMove(): number {\r\n        const emptyIndices: number[] = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (this.board[i] === CellState.Empty) {\r\n                emptyIndices.push(i);\r\n            }\r\n        }\r\n\r\n        // 中等難度策略：70% 使用 Minimax，30% 隨機走\r\n        const useMinimax = Math.random() < 0.7;\r\n\r\n        if (useMinimax) {\r\n            let bestScore = -Infinity;\r\n            let bestMove = -1;\r\n\r\n            for (const i of emptyIndices) {\r\n                this.board[i] = CellState.AI;\r\n                const score = this.minimax(0, false);\r\n                this.board[i] = CellState.Empty;\r\n\r\n                if (score > bestScore) {\r\n                    bestScore = score;\r\n                    bestMove = i;\r\n                }\r\n            }\r\n\r\n            return bestMove;\r\n        } else {\r\n            const randomIndex = Math.floor(Math.random() * emptyIndices.length);\r\n            return emptyIndices[randomIndex];\r\n        }\r\n    }\r\n\r\n    private minimax(depth: number, isMaximizing: boolean): number {\r\n        const winner = this.getWinner();\r\n        \r\n        if (winner === CellState.AI) return 10 - depth;\r\n        if (winner === CellState.Player) return depth - 10;\r\n        if (this.isBoardFull()) return 0;\r\n        \r\n        if (isMaximizing) {\r\n            let bestScore = -Infinity;\r\n            for (let i = 0; i < 9; i++) {\r\n                if (this.board[i] === CellState.Empty) {\r\n                    this.board[i] = CellState.AI;\r\n                    const score = this.minimax(depth + 1, false);\r\n                    this.board[i] = CellState.Empty;\r\n                    bestScore = Math.max(score, bestScore);\r\n                }\r\n            }\r\n            return bestScore;\r\n        } else {\r\n            let bestScore = Infinity;\r\n            for (let i = 0; i < 9; i++) {\r\n                if (this.board[i] === CellState.Empty) {\r\n                    this.board[i] = CellState.Player;\r\n                    const score = this.minimax(depth + 1, true);\r\n                    this.board[i] = CellState.Empty;\r\n                    bestScore = Math.min(score, bestScore);\r\n                }\r\n            }\r\n            return bestScore;\r\n        }\r\n    }\r\n    \r\nprivate checkGameEnd(): boolean {\r\n    const winner = this.getWinner();\r\n    \r\n    if (winner === CellState.Player) {\r\n        this.gameState = GameState.PlayerWin;\r\n        this.updateStatusText(\"Win\", new Color(255, 215, 0));// 黃色\r\n        this.updateResultIcon(this.circleSprite);\r\n\r\n        // this.updateStatusLabel(\r\n        //     \"WIN\",\r\n        //     new Color(255, 215, 0), // 黃色\r\n        //     this.circleSprite\r\n        // );\r\n        return true;\r\n    } else if (winner === CellState.AI) {\r\n        this.gameState = GameState.AIWin;\r\n        this.updateStatusText(\"Win\", new Color(255, 215, 0));// 黃色\r\n        this.updateResultIcon(this.crossSprite);\r\n        // this.updateStatusLabel(\r\n        //     \"WIN\",\r\n        //     new Color(255, 215, 0), // 黃色\r\n        //     this.crossSprite\r\n        // );\r\n        return true;\r\n    } else if (this.isBoardFull()) {\r\n        this.gameState = GameState.Draw;\r\n        this.updateStatusText(\"A Draw!!!\", new Color(0, 128, 255));// 藍色\r\n        this.updateResultIcon();\r\n        // this.updateStatusLabel(\r\n        //     \"A DRAW!!!\",\r\n        //     new Color(0, 128, 255), // 藍色\r\n        //     null\r\n        // );\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n}\r\n    \r\n    private getWinner(): CellState {\r\n        for (const combination of this.WINNING_COMBINATIONS) {\r\n            const [a, b, c] = combination;\r\n            if (this.board[a] !== CellState.Empty && \r\n                this.board[a] === this.board[b] && \r\n                this.board[b] === this.board[c]) {\r\n                return this.board[a];\r\n            }\r\n        }\r\n        return CellState.Empty;\r\n    }\r\n    \r\n    private isBoardFull(): boolean {\r\n        return this.board.every(cell => cell !== CellState.Empty);\r\n    }\r\n    \r\n    private updateCellSprite(index: number, state: CellState) {\r\n        const button = this.gridButtons[index];\r\n        const sprite = button.node.getComponent(Sprite);\r\n        \r\n        switch (state) {\r\n            case CellState.Player:\r\n                sprite.spriteFrame = this.circleSprite;\r\n                break;\r\n            case CellState.AI:\r\n                sprite.spriteFrame = this.crossSprite;\r\n                break;\r\n            case CellState.Empty:\r\n            default:\r\n                sprite.spriteFrame = this.emptySprite;\r\n                break;\r\n        }\r\n    }\r\n    \r\n    // private updateStatusLabel(text: string, color?: Color, iconSprite?: SpriteFrame) {\r\n    //     if (this.statusLabel) {\r\n    //         this.statusLabel.string = text;\r\n    //         if (color) {\r\n    //             this.statusLabel.color = color;\r\n    //         }\r\n    //     }\r\n    //     if (this.resultIcon) {\r\n    //         if (iconSprite) {\r\n    //             this.resultIcon.spriteFrame = iconSprite;\r\n    //             this.resultIcon.node.active = true;\r\n    //         } else {\r\n    //             this.resultIcon.node.active = false;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    private updateStatusText(text: string, color?: Color) {\r\n    this.statusLabel.string = text;\r\n    if (color) {\r\n        this.statusLabel.color = color;\r\n    }\r\n}\r\n\r\n    private updateResultIcon(sprite?: SpriteFrame) {\r\n        if (sprite) {\r\n            this.resultIcon.node.active = true;\r\n            this.resultIcon.spriteFrame = sprite;\r\n        } else {\r\n            this.resultIcon.node.active = false;\r\n        }\r\n    }\r\n\r\n    \r\n    private resetGame() {\r\n        this.initializeGame();\r\n    }\r\n}\r\n\r\n"]}