{"version":3,"sources":["file:///C:/Users/sylia/tictactoe_Project/assets/scripts/TicTacToeGame.ts"],"names":["_decorator","Component","Node","Button","Label","Sprite","SpriteFrame","ccclass","property","GameState","CellState","Difficulty","TicTacToeGame","gameState","Playing","board","Array","fill","Empty","gridButtons","currentDifficulty","Medium","isInGame","WINNING_COMBINATIONS","start","showDifficultyMenu","setupEventListeners","difficultyMenu","active","gameBoard","resetButton","node","backToMenuButton","statusLabel","string","difficultyLabel","startGame","difficulty","difficultyNames","initializeGame","updateStatusLabel","i","button","children","getComponent","push","interactable","updateCellSprite","on","EventType","CLICK","onCellClick","resetGame","easyButton","Easy","mediumButton","hardButton","Hard","index","makeMove","Player","checkGameEnd","scheduleOnce","makeAIMove","player","bestMove","getEasyMove","getMediumMove","getHardMove","AI","random","Math","getRandomMove","getBasicStrategyMove","getMediumStrategyMove","bestScore","Infinity","score","minimax","emptyCells","length","randomIndex","floor","getWinner","corners","emptyCorners","filter","depth","isMaximizing","winner","isBoardFull","max","min","PlayerWin","AIWin","Draw","combination","a","b","c","every","cell","state","buttonComponent","spriteFrame","circleSprite","crossSprite","emptySprite","normalSprite","pressedSprite","hoverSprite","disabledSprite","text"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Button, Label, Sprite, SpriteFrame, Vec3 } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\nenum GameState {\r\n    Playing,\r\n    PlayerWin,\r\n    AIWin,\r\n    Draw\r\n}\r\n\r\nenum CellState {\r\n    Empty = 0,\r\n    Player = 1,  // 圈圈\r\n    AI = 2       // 叉叉\r\n}\r\n\r\nenum Difficulty {\r\n    Easy = 0,\r\n    Medium = 1,\r\n    Hard = 2\r\n}\r\n\r\n@ccclass('TicTacToeGame')\r\nexport class TicTacToeGame extends Component {\r\n    \r\n    @property(Node)\r\n    gameBoard: Node = null;\r\n    \r\n    @property(Button)\r\n    resetButton: Button = null;\r\n    \r\n    @property(Label)\r\n    statusLabel: Label = null;\r\n    \r\n    @property(SpriteFrame)\r\n    circleSprite: SpriteFrame = null;  // 圈圈图片\r\n    \r\n    @property(SpriteFrame)\r\n    crossSprite: SpriteFrame = null;   // 叉叉图片\r\n    \r\n    @property(SpriteFrame)\r\n    emptySprite: SpriteFrame = null;   // 空格图片\r\n    \r\n    // 难度选择UI\r\n    @property(Node)\r\n    difficultyMenu: Node = null;       // 难度选择菜单\r\n    \r\n    @property(Button)\r\n    easyButton: Button = null;\r\n    \r\n    @property(Button)\r\n    mediumButton: Button = null;\r\n    \r\n    @property(Button)\r\n    hardButton: Button = null;\r\n    \r\n    @property(Button)\r\n    backToMenuButton: Button = null;   // 返回菜单按钮\r\n    \r\n    @property(Label)\r\n    difficultyLabel: Label = null;     // 显示当前难度\r\n    \r\n    private gameState: GameState = GameState.Playing;\r\n    private board: CellState[] = new Array(9).fill(CellState.Empty);\r\n    private gridButtons: Button[] = [];\r\n    private currentDifficulty: Difficulty = Difficulty.Medium;\r\n    private isInGame: boolean = false;\r\n    \r\n    // 获胜组合\r\n    private readonly WINNING_COMBINATIONS = [\r\n        [0, 1, 2], [3, 4, 5], [6, 7, 8], // 横排\r\n        [0, 3, 6], [1, 4, 7], [2, 5, 8], // 竖排\r\n        [0, 4, 8], [2, 4, 6]             // 对角线\r\n    ];\r\n    \r\n    start() {\r\n        this.showDifficultyMenu();\r\n        this.setupEventListeners();\r\n    }\r\n    \r\n    private showDifficultyMenu() {\r\n        this.isInGame = false;\r\n        if (this.difficultyMenu) {\r\n            this.difficultyMenu.active = true;\r\n        }\r\n        if (this.gameBoard) {\r\n            this.gameBoard.active = false;\r\n        }\r\n        if (this.resetButton) {\r\n            this.resetButton.node.active = false;\r\n        }\r\n        if (this.backToMenuButton) {\r\n            this.backToMenuButton.node.active = false;\r\n        }\r\n        if (this.statusLabel) {\r\n            this.statusLabel.string = \"选择难度开始游戏\";\r\n        }\r\n        if (this.difficultyLabel) {\r\n            this.difficultyLabel.node.active = false;\r\n        }\r\n    }\r\n    \r\n    private startGame(difficulty: Difficulty) {\r\n        this.currentDifficulty = difficulty;\r\n        this.isInGame = true;\r\n        \r\n        if (this.difficultyMenu) {\r\n            this.difficultyMenu.active = false;\r\n        }\r\n        if (this.gameBoard) {\r\n            this.gameBoard.active = true;\r\n        }\r\n        if (this.resetButton) {\r\n            this.resetButton.node.active = true;\r\n        }\r\n        if (this.backToMenuButton) {\r\n            this.backToMenuButton.node.active = true;\r\n        }\r\n        if (this.difficultyLabel) {\r\n            this.difficultyLabel.node.active = true;\r\n            const difficultyNames = [\"简单\", \"中等\", \"困难\"];\r\n            this.difficultyLabel.string = `难度: ${difficultyNames[difficulty]}`;\r\n        }\r\n        \r\n        this.initializeGame();\r\n    }\r\n    \r\n    private initializeGame() {\r\n        // 初始化游戏板\r\n        this.board.fill(CellState.Empty);\r\n        this.gameState = GameState.Playing;\r\n        this.updateStatusLabel(\"Your turn\");\r\n        \r\n        // 获取所有格子按钮\r\n        this.gridButtons = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            const button = this.gameBoard.children[i].getComponent(Button);\r\n            this.gridButtons.push(button);\r\n            \r\n            // 重置按钮为可交互状态\r\n            button.interactable = true;\r\n            \r\n            // 更新格子显示\r\n            this.updateCellSprite(i, CellState.Empty);\r\n        }\r\n    }\r\n    \r\n    private setupEventListeners() {\r\n        // 设置格子按钮事件\r\n        for (let i = 0; i < 9; i++) {\r\n            if (this.gameBoard && this.gameBoard.children[i]) {\r\n                const button = this.gameBoard.children[i].getComponent(Button);\r\n                if (button) {\r\n                    button.node.on(Button.EventType.CLICK, () => this.onCellClick(i), this);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // 设置重置按钮事件\r\n        if (this.resetButton) {\r\n            this.resetButton.node.on(Button.EventType.CLICK, this.resetGame, this);\r\n        }\r\n        \r\n        // 设置难度选择按钮事件\r\n        if (this.easyButton) {\r\n            this.easyButton.node.on(Button.EventType.CLICK, () => this.startGame(Difficulty.Easy), this);\r\n        }\r\n        if (this.mediumButton) {\r\n            this.mediumButton.node.on(Button.EventType.CLICK, () => this.startGame(Difficulty.Medium), this);\r\n        }\r\n        if (this.hardButton) {\r\n            this.hardButton.node.on(Button.EventType.CLICK, () => this.startGame(Difficulty.Hard), this);\r\n        }\r\n        \r\n        // 设置返回菜单按钮事件\r\n        if (this.backToMenuButton) {\r\n            this.backToMenuButton.node.on(Button.EventType.CLICK, this.showDifficultyMenu, this);\r\n        }\r\n    }\r\n    \r\n    private onCellClick(index: number) {\r\n        // 检查是否在游戏中\r\n        if (!this.isInGame) {\r\n            return;\r\n        }\r\n        \r\n        // 检查游戏状态和格子是否为空\r\n        if (this.gameState !== GameState.Playing || this.board[index] !== CellState.Empty) {\r\n            return;\r\n        }\r\n        \r\n        // 玩家下棋\r\n        this.makeMove(index, CellState.Player);\r\n        \r\n        // 检查游戏是否结束\r\n        if (this.checkGameEnd()) {\r\n            return;\r\n        }\r\n        \r\n        // AI下棋\r\n        this.scheduleOnce(() => {\r\n            this.makeAIMove();\r\n            this.checkGameEnd();\r\n        }, 0.5); // 延迟0.5秒让AI下棋\r\n    }\r\n    \r\n    private makeMove(index: number, player: CellState) {\r\n        this.board[index] = player;\r\n        this.updateCellSprite(index, player);\r\n        \r\n        if (player === CellState.Player) {\r\n            this.updateStatusLabel(\"AI Thinking...\");\r\n        } else {\r\n            this.updateStatusLabel(\"Your turn\");\r\n        }\r\n    }\r\n    \r\n    private makeAIMove() {\r\n        if (this.gameState !== GameState.Playing) {\r\n            return;\r\n        }\r\n        \r\n        let bestMove = -1;\r\n        \r\n        switch (this.currentDifficulty) {\r\n            case Difficulty.Easy:\r\n                bestMove = this.getEasyMove();\r\n                break;\r\n            case Difficulty.Medium:\r\n                bestMove = this.getMediumMove();\r\n                break;\r\n            case Difficulty.Hard:\r\n                bestMove = this.getHardMove();\r\n                break;\r\n        }\r\n        \r\n        if (bestMove !== -1) {\r\n            this.makeMove(bestMove, CellState.AI);\r\n        }\r\n    }\r\n    \r\n    // 简单难度：70%随机，30%聪明\r\n    private getEasyMove(): number {\r\n        const random = Math.random();\r\n        \r\n        if (random < 0.7) {\r\n            // 70%概率进行随机移动\r\n            return this.getRandomMove();\r\n        } else {\r\n            // 30%概率进行聪明移动（只考虑基本策略）\r\n            return this.getBasicStrategyMove();\r\n        }\r\n    }\r\n    \r\n    // 中等难度：40%随机，60%聪明\r\n    private getMediumMove(): number {\r\n        const random = Math.random();\r\n        \r\n        if (random < 0.4) {\r\n            // 40%概率进行随机移动\r\n            return this.getRandomMove();\r\n        } else {\r\n            // 60%概率进行智能移动（使用简化的策略）\r\n            return this.getMediumStrategyMove();\r\n        }\r\n    }\r\n    \r\n    // 困难难度：使用完整的Minimax算法\r\n    private getHardMove(): number {\r\n        let bestScore = -Infinity;\r\n        let bestMove = -1;\r\n        \r\n        for (let i = 0; i < 9; i++) {\r\n            if (this.board[i] === CellState.Empty) {\r\n                this.board[i] = CellState.AI;\r\n                const score = this.minimax(0, false);\r\n                this.board[i] = CellState.Empty;\r\n                \r\n                if (score > bestScore) {\r\n                    bestScore = score;\r\n                    bestMove = i;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return bestMove;\r\n    }\r\n    \r\n    // 随机移动\r\n    private getRandomMove(): number {\r\n        const emptyCells = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (this.board[i] === CellState.Empty) {\r\n                emptyCells.push(i);\r\n            }\r\n        }\r\n        \r\n        if (emptyCells.length > 0) {\r\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\r\n            return emptyCells[randomIndex];\r\n        }\r\n        \r\n        return -1;\r\n    }\r\n    \r\n    // 基本策略（简单难度使用）\r\n    private getBasicStrategyMove(): number {\r\n        // 1. 如果AI能获胜，立即获胜\r\n        for (let i = 0; i < 9; i++) {\r\n            if (this.board[i] === CellState.Empty) {\r\n                this.board[i] = CellState.AI;\r\n                if (this.getWinner() === CellState.AI) {\r\n                    this.board[i] = CellState.Empty;\r\n                    return i;\r\n                }\r\n                this.board[i] = CellState.Empty;\r\n            }\r\n        }\r\n        \r\n        // 2. 如果玩家要获胜，阻止玩家\r\n        for (let i = 0; i < 9; i++) {\r\n            if (this.board[i] === CellState.Empty) {\r\n                this.board[i] = CellState.Player;\r\n                if (this.getWinner() === CellState.Player) {\r\n                    this.board[i] = CellState.Empty;\r\n                    return i;\r\n                }\r\n                this.board[i] = CellState.Empty;\r\n            }\r\n        }\r\n        \r\n        // 3. 否则随机移动\r\n        return this.getRandomMove();\r\n    }\r\n    \r\n    // 中等策略\r\n    private getMediumStrategyMove(): number {\r\n        // 1. 如果AI能获胜，立即获胜\r\n        for (let i = 0; i < 9; i++) {\r\n            if (this.board[i] === CellState.Empty) {\r\n                this.board[i] = CellState.AI;\r\n                if (this.getWinner() === CellState.AI) {\r\n                    this.board[i] = CellState.Empty;\r\n                    return i;\r\n                }\r\n                this.board[i] = CellState.Empty;\r\n            }\r\n        }\r\n        \r\n        // 2. 如果玩家要获胜，阻止玩家\r\n        for (let i = 0; i < 9; i++) {\r\n            if (this.board[i] === CellState.Empty) {\r\n                this.board[i] = CellState.Player;\r\n                if (this.getWinner() === CellState.Player) {\r\n                    this.board[i] = CellState.Empty;\r\n                    return i;\r\n                }\r\n                this.board[i] = CellState.Empty;\r\n            }\r\n        }\r\n        \r\n        // 3. 优先选择中心\r\n        if (this.board[4] === CellState.Empty) {\r\n            return 4;\r\n        }\r\n        \r\n        // 4. 选择角落\r\n        const corners = [0, 2, 6, 8];\r\n        const emptyCorners = corners.filter(i => this.board[i] === CellState.Empty);\r\n        if (emptyCorners.length > 0) {\r\n            const randomIndex = Math.floor(Math.random() * emptyCorners.length);\r\n            return emptyCorners[randomIndex];\r\n        }\r\n        \r\n        // 5. 否则随机移动\r\n        return this.getRandomMove();\r\n    }\r\n    \r\n    private minimax(depth: number, isMaximizing: boolean): number {\r\n        const winner = this.getWinner();\r\n        \r\n        if (winner === CellState.AI) return 10 - depth;\r\n        if (winner === CellState.Player) return depth - 10;\r\n        if (this.isBoardFull()) return 0;\r\n        \r\n        if (isMaximizing) {\r\n            let bestScore = -Infinity;\r\n            for (let i = 0; i < 9; i++) {\r\n                if (this.board[i] === CellState.Empty) {\r\n                    this.board[i] = CellState.AI;\r\n                    const score = this.minimax(depth + 1, false);\r\n                    this.board[i] = CellState.Empty;\r\n                    bestScore = Math.max(score, bestScore);\r\n                }\r\n            }\r\n            return bestScore;\r\n        } else {\r\n            let bestScore = Infinity;\r\n            for (let i = 0; i < 9; i++) {\r\n                if (this.board[i] === CellState.Empty) {\r\n                    this.board[i] = CellState.Player;\r\n                    const score = this.minimax(depth + 1, true);\r\n                    this.board[i] = CellState.Empty;\r\n                    bestScore = Math.min(score, bestScore);\r\n                }\r\n            }\r\n            return bestScore;\r\n        }\r\n    }\r\n    \r\n    private checkGameEnd(): boolean {\r\n        const winner = this.getWinner();\r\n        \r\n        if (winner === CellState.Player) {\r\n            this.gameState = GameState.PlayerWin;\r\n            this.updateStatusLabel(\"You win!\");\r\n            return true;\r\n        } else if (winner === CellState.AI) {\r\n            this.gameState = GameState.AIWin;\r\n            this.updateStatusLabel(\"AI Win!\");\r\n            return true;\r\n        } else if (this.isBoardFull()) {\r\n            this.gameState = GameState.Draw;\r\n            this.updateStatusLabel(\"A Draw!\");\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    private getWinner(): CellState {\r\n        for (const combination of this.WINNING_COMBINATIONS) {\r\n            const [a, b, c] = combination;\r\n            if (this.board[a] !== CellState.Empty && \r\n                this.board[a] === this.board[b] && \r\n                this.board[b] === this.board[c]) {\r\n                return this.board[a];\r\n            }\r\n        }\r\n        return CellState.Empty;\r\n    }\r\n    \r\n    private isBoardFull(): boolean {\r\n        return this.board.every(cell => cell !== CellState.Empty);\r\n    }\r\n    \r\n    private updateCellSprite(index: number, state: CellState) {\r\n        const button = this.gridButtons[index];\r\n        const buttonComponent = button.getComponent(Button);\r\n        \r\n        let spriteFrame: SpriteFrame = null;\r\n        switch (state) {\r\n            case CellState.Player:\r\n                spriteFrame = this.circleSprite;\r\n                break;\r\n            case CellState.AI:\r\n                spriteFrame = this.crossSprite;\r\n                break;\r\n            case CellState.Empty:\r\n            default:\r\n                spriteFrame = this.emptySprite;\r\n                break;\r\n        }\r\n        \r\n        // 设置按钮的所有状态都使用相同的图片，避免hover时改变\r\n        buttonComponent.normalSprite = spriteFrame;\r\n        buttonComponent.pressedSprite = spriteFrame;\r\n        buttonComponent.hoverSprite = spriteFrame;\r\n        buttonComponent.disabledSprite = spriteFrame;\r\n        \r\n        // 如果格子已被占用，禁用按钮交互但保持视觉效果\r\n        if (state !== CellState.Empty) {\r\n            buttonComponent.interactable = false;\r\n            // 重新启用视觉效果但禁用点击\r\n            buttonComponent.node.getComponent(Sprite).spriteFrame = spriteFrame;\r\n        } else {\r\n            buttonComponent.interactable = true;\r\n        }\r\n    }\r\n    \r\n    private updateStatusLabel(text: string) {\r\n        if (this.statusLabel) {\r\n            this.statusLabel.string = text;\r\n        }\r\n    }\r\n    \r\n    private resetGame() {\r\n        if (this.isInGame) {\r\n            this.initializeGame();\r\n        }\r\n    }\r\n}"]}